graph TD
    %% Application Architecture Diagram for HealthTrackPlus
    
    %% Platform-Specific and Shared Components
    subgraph "Cross-Platform Architecture"
        SharedCore["Shared Core<br>TypeScript/JavaScript"]
        
        subgraph "Platform Specific"
            WebApp["Web Application<br>(React)"]
            IOSApp["iOS Application<br>(Capacitor + Native)"]
            AndroidApp["Android Application<br>(Capacitor + Native)"]
        end
        
        subgraph "Shared Components"
            SharedLogic["Shared Business Logic<br>(TypeScript)"]
            SharedAPI["Shared API Client<br>(TypeScript)"]
            SharedModels["Shared Data Models<br>(TypeScript Interfaces)"]
            SharedValidation["Shared Validation<br>(Zod Schemas)"]
        end
        
        SharedCore --> SharedLogic
        SharedCore --> SharedAPI
        SharedCore --> SharedModels
        SharedCore --> SharedValidation
        
        SharedLogic --> WebApp
        SharedLogic --> IOSApp
        SharedLogic --> AndroidApp
        
        SharedAPI --> WebApp
        SharedAPI --> IOSApp
        SharedAPI --> AndroidApp
        
        SharedModels --> WebApp
        SharedModels --> IOSApp
        SharedModels --> AndroidApp
        
        SharedValidation --> WebApp
        SharedValidation --> IOSApp
        SharedValidation --> AndroidApp
    end
    
    %% Client / Frontend
    subgraph "Frontend Architecture"
        UI["User Interface Layer"]
        
        subgraph "Frontend Clean Architecture"
            FDomain["Domain Layer<br>- Entities<br>- Interfaces<br>- Value Objects"]
            FApp["Application Layer<br>- Services<br>- Use Cases"]
            FInfra["Infrastructure Layer<br>- Repositories (API calls)"]
            FPresent["Presentation Layer<br>- Hooks<br>- Components"]
            
            FDomain --> FApp
            FApp --> FInfra
            FInfra --> FPresent
        end
        
        subgraph "UI Components"
            Dashboard["Dashboard Components"]
            MedicalExams["Medical Exam Components"]
            Activities["Activity Components"]
            Nutrition["Nutrition Components"]
            Baby["Baby Tracking Components"]
            Pregnancy["Pregnancy Components"]
            Auth["Auth Components"]
            Settings["Settings"]
        end
        
        UI --> Dashboard
        UI --> MedicalExams
        UI --> Activities
        UI --> Nutrition
        UI --> Baby
        UI --> Pregnancy
        UI --> Auth
        UI --> Settings
        
        FPresent --> UI
        WebApp --- UI
    end
    
    %% Mobile Native Features
    subgraph "Native Features"
        NativeCamera["Camera Access<br>(Image Capture)"]
        NativeStorage["Secure Storage<br>(Auth Tokens)"]
        NativeNotifications["Push Notifications"]
        NativeSensors["Health Sensors<br>(Step Counter, Heart Rate)"]
        NativeLocation["Geolocation<br>(Activity Tracking)"]
        NativeSharing["Native Sharing<br>(Reports, Results)"]
        NativeBiometrics["Biometric Authentication<br>(FaceID/TouchID)"]
    end
    
    IOSApp --> NativeCamera
    IOSApp --> NativeStorage
    IOSApp --> NativeNotifications
    IOSApp --> NativeSensors
    IOSApp --> NativeLocation
    IOSApp --> NativeSharing
    IOSApp --> NativeBiometrics
    
    AndroidApp --> NativeCamera
    AndroidApp --> NativeStorage
    AndroidApp --> NativeNotifications
    AndroidApp --> NativeSensors
    AndroidApp --> NativeLocation
    AndroidApp --> NativeSharing
    AndroidApp --> NativeBiometrics
    
    %% Backend Server
    subgraph "Backend Architecture"
        Server["Express Server"]
        
        subgraph "Backend Clean Architecture"
            BDomain["Domain Layer<br>- Entities<br>- Interfaces<br>- Value Objects"]
            BApp["Application Layer<br>- Services<br>- Use Cases"]
            BInfra["Infrastructure Layer<br>- Repositories"]
            BPresent["Presentation Layer<br>- Controllers<br>- Routes"]
            
            BDomain --> BApp
            BApp --> BInfra
            BInfra --> BPresent
        end
        
        subgraph "API Routes"
            AuthRoutes["Authentication Routes"]
            ExamRoutes["Medical Exam Routes"]
            ActivityRoutes["Activity Routes"]
            NutritionRoutes["Nutrition Routes"]
            SleepRoutes["Sleep Routes"]
            WaterRoutes["Water Intake Routes"]
            VideoRoutes["Video Routes"]
            HealthRoutes["Health Insights Routes"]
            ProfileRoutes["Health Profile Routes"]
            PlanRoutes["Health Plan Routes"]
            AIRoutes["AI Chat Routes"]
            BabyRoutes["Baby Tracking Routes"]
            PregnancyRoutes["Pregnancy Routes"]
            SubscriptionRoutes["Subscription Routes"]
        end
        
        BPresent --> Server
        Server --> AuthRoutes
        Server --> ExamRoutes
        Server --> ActivityRoutes
        Server --> NutritionRoutes
        Server --> SleepRoutes
        Server --> WaterRoutes
        Server --> VideoRoutes
        Server --> HealthRoutes
        Server --> ProfileRoutes
        Server --> PlanRoutes
        Server --> AIRoutes
        Server --> BabyRoutes
        Server --> PregnancyRoutes
        Server --> SubscriptionRoutes
    end
    
    %% Security Layer
    subgraph "Security Architecture"
        Auth["Authentication<br>- JWT Tokens<br>- OAuth 2.0<br>- Two-Factor Auth"]
        AuthZ["Authorization<br>- Role-Based Access<br>- Permission Controls"]
        DataSec["Data Security<br>- Encryption at Rest<br>- Encryption in Transit"]
        SecMonitor["Security Monitoring<br>- Audit Logs<br>- Intrusion Detection"]
        InputVal["Input Validation<br>- Schema Validation<br>- Sanitization"]
        CSRF["CSRF Protection"]
        RateLimit["Rate Limiting"]
    end
    
    SharedAPI --> Auth
    Server --> Auth
    Server --> AuthZ
    Server --> DataSec
    Server --> SecMonitor
    Server --> InputVal
    Server --> CSRF
    Server --> RateLimit
    
    %% Database
    subgraph "Database Architecture"
        PostgreSQL["PostgreSQL Database"]
        
        subgraph "Database Schema"
            Users["Users Table"]
            MedicalExams["Medical Exams Table"]
            ExamDetails["Exam Details Table"]
            Activities["Activities Table"]
            SleepRecords["Sleep Records Table"]
            WaterIntake["Water Intake Table"]
            Meals["Meals Table"]
            FoodItems["Food Items Table"]
            Recipes["Recipes Table"]
            Videos["Videos Table"]
            VideoProgress["Video Progress Table"]
            CourseTracks["Course Tracks Table"]
            TrackVideos["Track Videos Table"]
            HealthInsights["Health Insights Table"]
            HealthProfiles["Health Profiles Table"]
            HealthPlans["Health Plans Table"]
            Medications["Medications Table"]
            MedicationLogs["Medication Logs Table"]
            MeditationSessions["Meditation Sessions Table"]
            MenstrualCycles["Menstrual Cycles Table"]
            FertilityTracking["Fertility Tracking Table"]
            PregnancyTracking["Pregnancy Tracking Table"]
            BabyGrowth["Baby Growth Tracking Table"]
            BabyMeasurements["Baby Measurements Table"]
        end
        
        PostgreSQL --> Users
        PostgreSQL --> MedicalExams
        PostgreSQL --> ExamDetails
        PostgreSQL --> Activities
        PostgreSQL --> SleepRecords
        PostgreSQL --> WaterIntake
        PostgreSQL --> Meals
        PostgreSQL --> FoodItems
        PostgreSQL --> Recipes
        PostgreSQL --> Videos
        PostgreSQL --> VideoProgress
        PostgreSQL --> CourseTracks
        PostgreSQL --> TrackVideos
        PostgreSQL --> HealthInsights
        PostgreSQL --> HealthProfiles
        PostgreSQL --> HealthPlans
        PostgreSQL --> Medications
        PostgreSQL --> MedicationLogs
        PostgreSQL --> MeditationSessions
        PostgreSQL --> MenstrualCycles
        PostgreSQL --> FertilityTracking
        PostgreSQL --> PregnancyTracking
        PostgreSQL --> BabyGrowth
        PostgreSQL --> BabyMeasurements
    end
    
    %% External Services
    subgraph "External Services"
        Stripe["Stripe Payment Processing<br>- Subscriptions<br>- Payment Processing"]
        GoogleAI["Google Gemini AI<br>- Medical Chat<br>- Health Insights"]
        AnthropicAI["Anthropic AI<br>- Content Analysis<br>- Exam Processing"]
        NeonDB["Neon Serverless PostgreSQL<br>- Managed Database"]
        CloudStorage["Cloud Storage<br>- Exams & Documents<br>- Media Storage"]
        PushProvider["Push Notification Service<br>- Mobile Notifications"]
        EmailService["Email Service<br>- Transactional Emails<br>- Reports"]
    end
    
    %% Data Flow
    subgraph "Data Flow Patterns"
        APIFlow["RESTful API Calls"]
        RealTimeFlow["WebSocket Real-time Updates"]
        AsyncFlow["Asynchronous Processing"]
        EventFlow["Event-based Communication"]
        BatchFlow["Batch Processing"]
        OfflineSync["Offline Data Synchronization"]
    end
    
    WebApp --> APIFlow
    IOSApp --> APIFlow
    AndroidApp --> APIFlow
    IOSApp --> OfflineSync
    AndroidApp --> OfflineSync
    WebApp --> RealTimeFlow
    IOSApp --> RealTimeFlow
    AndroidApp --> RealTimeFlow
    Server --> AsyncFlow
    Server --> EventFlow
    Server --> BatchFlow
    AsyncFlow --> GoogleAI
    AsyncFlow --> AnthropicAI
    
    %% Connections between major components
    WebApp <--> APIFlow
    IOSApp <--> APIFlow
    AndroidApp <--> APIFlow
    APIFlow <--> Server
    RealTimeFlow <--> Server
    Server <--> PostgreSQL
    Server <--> Stripe
    Server <--> GoogleAI
    Server <--> AnthropicAI
    Server <--> CloudStorage
    Server <--> EmailService
    Server <--> PushProvider
    PostgreSQL <--> NeonDB
    Auth <--> Users

    classDef frontend fill:#f9f,stroke:#333,stroke-width:2px;
    classDef backend fill:#bbf,stroke:#333,stroke-width:2px;
    classDef database fill:#bfb,stroke:#333,stroke-width:2px;
    classDef external fill:#fbb,stroke:#333,stroke-width:2px;
    classDef mobile fill:#ffb,stroke:#333,stroke-width:2px;
    classDef shared fill:#9ef,stroke:#333,stroke-width:2px;
    classDef security fill:#fd9,stroke:#333,stroke-width:2px;
    classDef dataflow fill:#dff,stroke:#333,stroke-width:2px;
    
    class WebApp,UI,Dashboard,MedicalExams,Activities,Nutrition,Baby,Pregnancy,Auth,Settings,FDomain,FApp,FInfra,FPresent frontend;
    class Server,AuthRoutes,ExamRoutes,ActivityRoutes,NutritionRoutes,SleepRoutes,WaterRoutes,VideoRoutes,HealthRoutes,ProfileRoutes,PlanRoutes,AIRoutes,BabyRoutes,PregnancyRoutes,SubscriptionRoutes,BDomain,BApp,BInfra,BPresent backend;
    class PostgreSQL,Users,MedicalExams,ExamDetails,Activities,SleepRecords,WaterIntake,Meals,FoodItems,Recipes,Videos,VideoProgress,CourseTracks,TrackVideos,HealthInsights,HealthProfiles,HealthPlans,Medications,MedicationLogs,MeditationSessions,MenstrualCycles,FertilityTracking,PregnancyTracking,BabyGrowth,BabyMeasurements database;
    class Stripe,GoogleAI,AnthropicAI,NeonDB,CloudStorage,PushProvider,EmailService external;
    class IOSApp,AndroidApp,NativeCamera,NativeStorage,NativeNotifications,NativeSensors,NativeLocation,NativeSharing,NativeBiometrics mobile;
    class SharedCore,SharedLogic,SharedAPI,SharedModels,SharedValidation shared;
    class Auth,AuthZ,DataSec,SecMonitor,InputVal,CSRF,RateLimit security;
    class APIFlow,RealTimeFlow,AsyncFlow,EventFlow,BatchFlow,OfflineSync dataflow;